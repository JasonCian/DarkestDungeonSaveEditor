plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'com.github.gmazzo.buildconfig' version '5.3.5'
}

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

javafx {
    version = '21'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.web']
}

// 设置编码为UTF-8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    testImplementation 'org.testng:testng:7.8.0'
    
    // Core JSON processing
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.15.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    
    // Google API (updated versions)
    implementation 'com.google.api-client:google-api-client:2.2.0'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.34.1'
    implementation 'com.google.apis:google-api-services-sheets:v4-rev20220927-2.0.0'
    
    // Modern UI components
    implementation 'org.controlsfx:controlsfx:11.1.2'
    implementation 'org.fxmisc.richtext:richtextfx:0.11.2'
    implementation 'com.jfoenix:jfoenix:9.0.10'
    
    // Legacy Swing components (temporary - for backward compatibility)
    implementation 'com.fifesoft:rsyntaxtextarea:3.3.4'
    
    // Utility libraries
    implementation 'org.apache.commons:commons-lang3:3.13.0'
    implementation 'commons-io:commons-io:2.11.0'
    
    // Logging
    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'ch.qos.logback:logback-classic:1.4.11'
}

buildConfig {
    packageName("de.robojumper.ddsavereader")
    buildConfigField('String', 'NAME', "\"${project.name}\"")
    buildConfigField('String', 'VERSION', "\"${project.version}\"")

    buildConfigField('String', 'DISPLAY_NAME', "\"$displayname\"")
    buildConfigField('String', 'GITHUB_URL', "\"$githuburl\"")
    buildConfigField('String', 'UPDATE_URL', "\"$releasesurl\"")
    buildConfigField('String', 'JAR_NAME', "\"${jarname}.jar\"")
    buildConfigField('String', 'DATA_DIR', "\"$datadir\"")
}

test {
    useTestNG()
}

jar {
    if (!project.hasProperty("includeSecret")) {
        exclude 'client_secret.json'
    }
    archiveBaseName = "$jarname"
}

mainClassName = "de.robojumper.ddsavereader.Main"

application {
    mainClass.set("de.robojumper.ddsavereader.Main")
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Main-Class': mainClassName,
                'Class-Path': '.',
                'Add-Opens': 'java.base/java.lang=ALL-UNNAMED java.base/java.util=ALL-UNNAMED java.desktop/java.awt=ALL-UNNAMED java.desktop/sun.awt=ALL-UNNAMED'
    }
    setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    archiveBaseName = "$jarname"
    archiveFileName = "${jarname}.jar"
    
    // 确保包含JavaFX和所有运行时依赖
    from { 
        configurations.runtimeClasspath.collect { 
            it.isDirectory() ? it : zipTree(it).matching {
                exclude 'META-INF/MANIFEST.MF'
                exclude 'META-INF/*.SF'
                exclude 'META-INF/*.DSA'
                exclude 'META-INF/*.RSA'
            }
        } 
    }
    with jar
    
    // 添加启动时的JVM参数处理
    doFirst {
        println "Building fatJar with JavaFX modules included for double-click execution"
        println "JavaFX version: ${javafx.version}"
        println "JavaFX modules: ${javafx.modules}"
    }
}


task dist(type: Zip, dependsOn: fatJar) {
    from("${buildDir}/libs") {
        include "${jarname}.jar"
    }
    from("${projectDir}") {
        include 'LICENSE'
        include 'README.md'
    }
    from ("${projectDir}/Licenses") {
        include "**/*"
        into "Licenses"
    }
    from ("${projectDir}/docs") {
        include "**/*"
        into "docs"
    }

    destinationDirectory = file("${buildDir}/dist")
    archiveBaseName = "${jarname}"
}
